<ui:composition
        xmlns="http://www.w3.org/1999/xhtml"
        xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
        xmlns:h="http://xmlns.jcp.org/jsf/html"
        template="/uii/templatePG/templatePG.html"
        xmlns:intranda="http://xmlns.jcp.org/jsf/composite/compositesPG"
>

    <ui:param
            name="myPageTitle"
            value="#{msgs.vocabularyManager_vocabulary}: #{vocabularyBeanLEGACY.currentVocabularyLEGACY.title}"/>

    <ui:define name="breadcrumb">
        <intranda:breadcrumb
                id="index"
                label="#{DashboardForm.plugin==null?msgs.startseite:msgs.dashboard}"
                action="index"
                navId="a0"/>
        <intranda:breadcrumb
                id="admin"
                label="#{msgs.intranda_administration_vocabularies}"
                action="vocabulary_all"/>
        <intranda:breadcrumb
                id="edit"
                label="#{vocabularyBeanLEGACY.currentVocabularyLEGACY.title}"
                action="vocabulary_records"
                noSeparator="#{true}"/>
    </ui:define>

    <ui:define name="info">
    </ui:define>

    <ui:define name="content">
        <script
                type="text/javascript"
                src='template/js/plugins/tinymce/tinymce.min.js'></script>

        <h:form
                id="myform"
                styleClass="form-horizontal form-bordered"
                onkeypress="submitOnEnter(event);"
                rendered="#{LoginForm.hasRole('Admin_Vocabulary')}">

            <div class="row" role="main">
                <div class="col-12 col-lg-6 mb-4">
                    <intranda:vocabularyRecordList vocabulary="#{vocabularyRecordListBean.vocabulary}"/>
                </div>

                <div class="col-12 col-lg-6">
                    <intranda:vocabularyRecordEditor record="#{vocabularyRecordListBean.currentRecord}"/>
                </div>
            </div>
        </h:form>

    </ui:define>
    <script type="text/javascript">
        //<![CDATA[
        var simpleTinyMceConfig = {
            selector: '.editor',
            setup: function (editor) {
                editor.on('change', function () {
                    tinymce.triggerSave();
                });
            },
            valid_elements: 'p,strong,em,span[!style<text-decoration: underline;],sup,',
            statusbar: true,
            theme: 'modern',
            height: 250,
            plugins: ['print code preview fullscreen'],
            menu: {},
            toolbar: false,
            toolbar: 'undo redo | bold italic underline | superscript | code ',
            content_css: 'css/content.css',
            init_instance_callback: function (editor) {
                var readOnlyAttr = $("#" + editor.id.replace(":", "\\:")).attr("readonly");
                if (readOnlyAttr === "readonly") {
                    editor.setMode("readonly");
                }
            },
            setup: function (editor) {
                editor.on("blur", function (event, a, b) {
                    editor.save();
                    $("#" + editor.id.replace(":", "\\:")).trigger("change");
                });
            }

        };

        function initTinyMce() {
            console.log("Init tinyMce");
            tinymce.init(simpleTinyMceConfig);
        }

        $(window).on("load", function () {
            renderInputFields()
        })

        jsf.ajax.addOnEvent(function (data) {
            var ajaxstatus = data.status; // Can be "begin", "complete" and "success"
            switch (ajaxstatus) {
                case "success": // This is called when ajax response is successfully processed.
                    renderInputFields()
                    break;
            }
        });

        function renderInputFields(ajaxData) {
            if (typeof tinyMCE !== 'undefined') {
                if (ajaxData === undefined || ajaxData.status == "begin") {
                    for (edId in tinyMCE.editors) {
                        try {
                            tinyMCE.editors[edId].remove();
                            console.log("Removed editor " + edId);
                        } catch (error) {
                            console.log("Error occured during removing editors; ", error);
                        }
                    }
                }
                if (ajaxData === undefined || ajaxData.status == "success") {
                    initTinyMce(ajaxData);
                }
            }
        }

        //]]>
    </script>
</ui:composition>
